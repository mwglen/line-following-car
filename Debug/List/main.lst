###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          09/Feb/2022  11:57:16
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\main.c
#    Command line  =  
#        -f C:\Users\mwg22\AppData\Local\Temp\EW9A0D.tmp
#        (C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\main.c -lC
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\List -o
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5_2\430\lib\dlib\dl430xlsfn.h"
#        -I ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\List\main.lst
#    Object file   =  
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\Obj\main.r43
#
###############################################################################

C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include  "macros.h"
     15          #include <string.h>
     16          
     17          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          char change;
   \                     change:
   \   000000                DS8 1
     23          
     24          //***********************//
     25          typedef enum {
     26            FWD,
     27            BWD
     28          } Direction;
     29          

   \                                 In  segment CODE, align 2
     30          void drive(Direction left_dir, Direction right_dir) {
   \                     drive:
     31            switch(left_dir) {
   \   000000   4E4C         MOV.B   R12, R14
   \   000002   4E83         SUB.B   #0x0, R14
   \   000004   0224         JEQ     ??drive_2
   \   000006   5E83         SUB.B   #0x1, R14
   \   000008   023C         JMP     ??drive_0
     32              case FWD:
     33                //P6OUT &= ~L_REVERSE;
     34                P6OUT |= L_FORWARD;
   \                     ??drive_2:
   \   00000A   E2D34302     BIS.B   #0x2, &0x243
     35                break;
     36              case BWD:
     37                //P6OUT &= ~L_FORWARD;
     38                //P6OUT |= L_REVERSE;
     39                break;
     40            }
     41            
     42            switch(right_dir) {
   \                     ??drive_0:
   \   00000E   4E4D         MOV.B   R13, R14
   \   000010   4E83         SUB.B   #0x0, R14
   \   000012   0224         JEQ     ??drive_3
   \   000014   5E83         SUB.B   #0x1, R14
   \   000016   1001         RETA
     43              case FWD:
     44                //P6OUT &= ~R_REVERSE;
     45                P6OUT |= R_FORWARD;
   \                     ??drive_3:
   \   000018   D2D34302     BIS.B   #0x1, &0x243
     46                break;
     47              case BWD:
     48                //P6OUT &= ~R_FORWARD;
     49                //P6OUT |= R_REVERSE;
     50                break;
     51            }
     52          }
   \   00001C   1001         RETA
   \   00001E                REQUIRE _A_PCOUT_L

   \                                 In  segment CODE, align 2
     53          void stop_car() {
   \                     stop_car:
     54            P6OUT &= ~L_FORWARD;
   \   000000   E2C34302     BIC.B   #0x2, &0x243
     55            P6OUT &= ~R_FORWARD;
   \   000004   D2C34302     BIC.B   #0x1, &0x243
     56            //P6OUT &= ~L_REVERSE;
     57            //P6OUT &= ~R_REVERSE;
     58          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_PCOUT_L
     59          //**********************************//
     60          

   \                                 In  segment CODE, align 2
     61          void main(void){
   \                     main:
     62          //------------------------------------------------------------------------------
     63          // Main Program
     64          // This is the main routine for the program. Execution of code starts here.
     65          // The operating system is Back Ground Fore Ground.
     66          //
     67          //------------------------------------------------------------------------------
     68            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     69          // Disable the GPIO power-on default high-impedance mode to activate
     70          // previously configured port settings
     71          
     72            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     73            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     74            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     75            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     76            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     77          
     78            // Place the contents of what you want on the display, in between the quotes
     79            // Limited to 10 characters per line
     80            int bacon = 12;
   \   000018   3A400C00     MOV.W   #0xc, R10
     81            bacon += 25;
   \   00001C   3A501900     ADD.W   #0x19, R10
     82            strcpy(display_line[0], "   NCSU   ");
   \   000020   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   000024   3C40....     MOV.W   #display_line, R12
   \   000028   ........     CALLA   #strcpy
     83            strcpy(display_line[1], " WOLFPACK ");
   \   00002C   3D40....     MOV.W   #`?<Constant " WOLFPACK ">`, R13
   \   000030   3C40....     MOV.W   #display_line + 11, R12
   \   000034   ........     CALLA   #strcpy
     84            strcpy(display_line[2], "  ECE306  ");
   \   000038   3D40....     MOV.W   #`?<Constant "  ECE306  ">`, R13
   \   00003C   3C40....     MOV.W   #display_line + 22, R12
   \   000040   ........     CALLA   #strcpy
     85            strcpy(display_line[3], "  GP I/O  ");
   \   000044   3D40....     MOV.W   #`?<Constant "  GP I/O  ">`, R13
   \   000048   3C40....     MOV.W   #display_line + 33, R12
   \   00004C   ........     CALLA   #strcpy
     86            display_changed = TRUE;
   \   000050   D243....     MOV.B   #0x1, &display_changed
     87          
     88            drive(FWD, FWD);
   \   000054   4D43         MOV.B   #0x0, R13
   \   000056   4C43         MOV.B   #0x0, R12
   \   000058   ........     CALLA   #drive
     89          //------------------------------------------------------------------------------
     90          // Begining of the "While" Operating System
     91          //------------------------------------------------------------------------------
     92            while(ALWAYS) {                      // Can the Operating system run
     93              Carlson_StateMachine();            // Run a Time Based State Machine
   \                     ??main_0:
   \   00005C   ........     CALLA   #Carlson_StateMachine
     94              Switches_Process();                // Check for switch state change
   \   000060   ........     CALLA   #Switches_Process
     95              Display_Process();                 // Update Display
   \   000064   ........     CALLA   #Display_Process
     96              P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   000068   D2E32202     XOR.B   #0x1, &0x222
   \   00006C   F73F         JMP     ??main_0
   \   00006E   0343         NOP
   \   000070                REQUIRE _A_PM5CTL0_L
   \   000070                REQUIRE _A_PBOUT_L
     97            }
     98          //------------------------------------------------------------------------------
     99          }
    100          

   \                                 In  segment CODE, align 2
    101          void Display_Process(void){
   \                     Display_Process:
    102            if(update_display){
   \   000000   C293....     CMP.B   #0x0, &update_display
   \   000004   0D24         JEQ     ??Display_Process_0
    103              update_display = 0;
   \   000006   C243....     MOV.B   #0x0, &update_display
    104              if(display_changed){
   \   00000A   C293....     CMP.B   #0x0, &display_changed
   \   00000E   0824         JEQ     ??Display_Process_0
    105                display_changed = 0;
   \   000010   C243....     MOV.B   #0x0, &display_changed
    106                Display_Update(0,0,0,0);
   \   000014   4F43         MOV.B   #0x0, R15
   \   000016   4E43         MOV.B   #0x0, R14
   \   000018   4D43         MOV.B   #0x0, R13
   \   00001A   4C43         MOV.B   #0x0, R12
   \   00001C   ........     CALLA   #Display_Update
    107              }
    108            }
    109          }
   \                     ??Display_Process_0:
   \   000020   1001         RETA
    110          

   \                                 In  segment CODE, align 2
    111          void Carlson_StateMachine(void){
   \                     Carlson_StateMachine:
    112              switch(Time_Sequence){
   \   000000   1F42....     MOV.W   &Time_Sequence, R15
   \   000004   3F803200     SUB.W   #0x32, R15
   \   000008   3B24         JEQ     ??Carlson_StateMachine_6
   \   00000A   3F803200     SUB.W   #0x32, R15
   \   00000E   2B24         JEQ     ??Carlson_StateMachine_7
   \   000010   3F803200     SUB.W   #0x32, R15
   \   000014   1D24         JEQ     ??Carlson_StateMachine_8
   \   000016   3F803200     SUB.W   #0x32, R15
   \   00001A   1124         JEQ     ??Carlson_StateMachine_9
   \   00001C   3F803200     SUB.W   #0x32, R15
   \   000020   3920         JNE     ??Carlson_StateMachine_5
    113                case 250:                        //
    114                  if(one_time){
   \   000022   C293....     CMP.B   #0x0, &one_time
   \   000026   0824         JEQ     ??Carlson_StateMachine_10
    115                    Init_LEDs();
   \   000028   ........     CALLA   #Init_LEDs
    116                    lcd_BIG_mid();
   \   00002C   ........     CALLA   #lcd_BIG_mid
    117                    display_changed = 1;
   \   000030   D243....     MOV.B   #0x1, &display_changed
    118                    one_time = 0;
   \   000034   C243....     MOV.B   #0x0, &one_time
    119                  }
    120                  Time_Sequence = 0;             //
   \                     ??Carlson_StateMachine_10:
   \   000038   8243....     MOV.W   #0x0, &Time_Sequence
    121                  break;
   \   00003C   1001         RETA
    122                case 200:                        //
    123                  if(one_time){
   \                     ??Carlson_StateMachine_9:
   \   00003E   C293....     CMP.B   #0x0, &one_time
   \   000042   2824         JEQ     ??Carlson_StateMachine_5
    124                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   000044   F2D040004302 BIS.B   #0x40, &0x243
    125                    one_time = 0;
   \   00004A   C243....     MOV.B   #0x0, &one_time
    126                  }
    127                  break;
   \   00004E   1001         RETA
    128                case 150:                         //
    129                  if(one_time){
   \                     ??Carlson_StateMachine_8:
   \   000050   C293....     CMP.B   #0x0, &one_time
   \   000054   1F24         JEQ     ??Carlson_StateMachine_5
    130                    P1OUT |= RED_LED;            // Change State of LED 4
   \   000056   D2D30202     BIS.B   #0x1, &0x202
    131                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   00005A   F2C040004302 BIC.B   #0x40, &0x243
    132                    one_time = 0;
   \   000060   C243....     MOV.B   #0x0, &one_time
    133                  }
    134                  break;
   \   000064   1001         RETA
    135                case 100:                         //
    136                  if(one_time){
   \                     ??Carlson_StateMachine_7:
   \   000066   C293....     CMP.B   #0x0, &one_time
   \   00006A   1424         JEQ     ??Carlson_StateMachine_5
    137          //          lcd_4line();
    138                    lcd_BIG_bot();
   \   00006C   ........     CALLA   #lcd_BIG_bot
    139                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   000070   F2D040004302 BIS.B   #0x40, &0x243
    140                    display_changed = 1;
   \   000076   D243....     MOV.B   #0x1, &display_changed
    141                    one_time = 0;
   \   00007A   C243....     MOV.B   #0x0, &one_time
    142                  }
    143                  break;
   \   00007E   1001         RETA
    144                case  50:                        //
    145                  if(one_time){
   \                     ??Carlson_StateMachine_6:
   \   000080   C293....     CMP.B   #0x0, &one_time
   \   000084   0724         JEQ     ??Carlson_StateMachine_5
    146                    P1OUT &= ~RED_LED;           // Change State of LED 4
   \   000086   D2C30202     BIC.B   #0x1, &0x202
    147                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   00008A   F2C040004302 BIC.B   #0x40, &0x243
    148                    one_time = 0;
   \   000090   C243....     MOV.B   #0x0, &one_time
    149                  }
    150                  break;                         //
    151                default: break;
    152              }
    153          }
   \                     ??Carlson_StateMachine_5:
   \   000094   1001         RETA
   \   000096                REQUIRE _A_PCOUT_L
   \   000096                REQUIRE _A_PAOUT_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WOLFPACK ">`:
   \   000000   20574F4C4650 DC8 " WOLFPACK "
   \            41434B2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ECE306  ">`:
   \   000000   202045434533 DC8 "  ECE306  "
   \            3036202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  GP I/O  ">`:
   \   000000   202047502049 DC8 "  GP I/O  "
   \            2F4F202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Carlson_StateMachine
        4   -> Init_LEDs
        4   -> lcd_BIG_bot
        4   -> lcd_BIG_mid
      4   Display_Process
        4   -> Display_Update
      4   drive
      4   main
        4   -> Carlson_StateMachine
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> drive
        4   -> strcpy
      4   stop_car


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "   NCSU   ">
      11  ?<Constant "  ECE306  ">
      11  ?<Constant "  GP I/O  ">
      11  ?<Constant " WOLFPACK ">
     150  Carlson_StateMachine
      34  Display_Process
       2  _A_PAOUT_L
       2  _A_PBOUT_L
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       1  display_mode
      30  drive
     112  main
       1  slow_input_down
      10  stop_car
       2  test_value

 
 336 bytes in segment CODE
   8 bytes in segment DATA16_AN
  44 bytes in segment DATA16_C
   6 bytes in segment DATA16_Z
 
 336 bytes of CODE  memory
  44 bytes of CONST memory
   6 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
