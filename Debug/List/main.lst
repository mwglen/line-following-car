###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          14/Feb/2022  20:25:20
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\main.c
#    Command line  =  
#        -f C:\Users\mwg22\AppData\Local\Temp\EW1951.tmp
#        (C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\main.c -lC
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\List -o
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5_2\430\lib\dlib\dl430xlsfn.h"
#        -I ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\List\main.lst
#    Object file   =  
#        C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\Debug\Obj\main.r43
#
###############################################################################

C:\Users\mwg22\Desktop\ECE-306_Code\Project_03\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include  "macros.h"
     15          #include <string.h>
     16          
     17          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          char change;
   \                     change:
   \   000000                DS8 1
     23          
     24          //------------------------------------------------------------------------------
     25          // Main Program
     26          // This is the main routine for the program. Execution of code starts here.
     27          // The operating system is Back Ground Fore Ground.
     28          //
     29          //------------------------------------------------------------------------------
     30          
     31          void start_clock();
     32          

   \                                 In  segment CODE, align 2
     33          void main(void){
   \                     main:
     34          
     35            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     36          
     37            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     38            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     39            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     40            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     41            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     42          
     43            // Place the contents of what you want on the display, in between the quotes
     44            // Limited to 10 characters per line
     45            strcpy(display_line[0], "   NCSU   ");
   \   000018   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     46            strcpy(display_line[1], " WOLFPACK ");
   \   000024   3D40....     MOV.W   #`?<Constant " WOLFPACK ">`, R13
   \   000028   3C40....     MOV.W   #display_line + 11, R12
   \   00002C   ........     CALLA   #strcpy
     47            strcpy(display_line[2], "  ECE306  ");
   \   000030   3D40....     MOV.W   #`?<Constant "  ECE306  ">`, R13
   \   000034   3C40....     MOV.W   #display_line + 22, R12
   \   000038   ........     CALLA   #strcpy
     48            strcpy(display_line[3], "  GP I/O  ");
   \   00003C   3D40....     MOV.W   #`?<Constant "  GP I/O  ">`, R13
   \   000040   3C40....     MOV.W   #display_line + 33, R12
   \   000044   ........     CALLA   #strcpy
     49            display_changed = TRUE;
   \   000048   D243....     MOV.B   #0x1, &display_changed
     50          
     51            // This function never returns
     52            start_clock();
   \   00004C   ........     CALLA   #start_clock
     53          }
   \   000050   1001         RETA
   \   000052                REQUIRE _A_PM5CTL0_L
     54          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     55          unsigned int old_Time_Sequence;
   \                     old_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     56          unsigned int mytime;
   \                     mytime:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
     57          void start_clock() {
   \                     start_clock:
   \                     ??start_clock_0:
     58            while(ALWAYS) {
     59              // Update Clock
     60              if (Time_Sequence != old_Time_Sequence) {
   \   000000   9292........ CMP.W   &old_Time_Sequence, &Time_Sequence
   \   000006   0724         JEQ     ??start_clock_1
     61                mytime++;
   \   000008   9253....     ADD.W   #0x1, &mytime
     62                old_Time_Sequence = Time_Sequence;
   \   00000C   9242........ MOV.W   &Time_Sequence, &old_Time_Sequence
     63                project_04();
   \   000012   ........     CALLA   #project_04
     64              }
     65              
     66              // Run Carlson's Code (should remove later)
     67              // Carlson_StateMachine();            // Run a Time Based State Machine
     68              // Switches_Process();                // Check for switch state change
     69              Display_Process();                 // Update Display
   \                     ??start_clock_1:
   \   000016   ........     CALLA   #Display_Process
     70              P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   00001A   D2E32202     XOR.B   #0x1, &0x222
   \   00001E   F03F         JMP     ??start_clock_0
   \   000020   0343         NOP
   \   000022                REQUIRE _A_PBOUT_L
     71            }
     72          }
     73          

   \                                 In  segment CODE, align 2
     74          void Display_Process(void){
   \                     Display_Process:
     75            if(update_display){
   \   000000   C293....     CMP.B   #0x0, &update_display
   \   000004   0D24         JEQ     ??Display_Process_0
     76              update_display = 0;
   \   000006   C243....     MOV.B   #0x0, &update_display
     77              if(display_changed){
   \   00000A   C293....     CMP.B   #0x0, &display_changed
   \   00000E   0824         JEQ     ??Display_Process_0
     78                display_changed = 0;
   \   000010   C243....     MOV.B   #0x0, &display_changed
     79                Display_Update(0,0,0,0);
   \   000014   4F43         MOV.B   #0x0, R15
   \   000016   4E43         MOV.B   #0x0, R14
   \   000018   4D43         MOV.B   #0x0, R13
   \   00001A   4C43         MOV.B   #0x0, R12
   \   00001C   ........     CALLA   #Display_Update
     80              }
     81            }
     82          }
   \                     ??Display_Process_0:
   \   000020   1001         RETA
     83          

   \                                 In  segment CODE, align 2
     84          void Carlson_StateMachine(void){
   \                     Carlson_StateMachine:
     85              switch(Time_Sequence){
   \   000000   1F42....     MOV.W   &Time_Sequence, R15
   \   000004   3F803200     SUB.W   #0x32, R15
   \   000008   3B24         JEQ     ??Carlson_StateMachine_6
   \   00000A   3F803200     SUB.W   #0x32, R15
   \   00000E   2B24         JEQ     ??Carlson_StateMachine_7
   \   000010   3F803200     SUB.W   #0x32, R15
   \   000014   1D24         JEQ     ??Carlson_StateMachine_8
   \   000016   3F803200     SUB.W   #0x32, R15
   \   00001A   1124         JEQ     ??Carlson_StateMachine_9
   \   00001C   3F803200     SUB.W   #0x32, R15
   \   000020   3920         JNE     ??Carlson_StateMachine_5
     86                case 250:                        //
     87                  if(one_time){
   \   000022   C293....     CMP.B   #0x0, &one_time
   \   000026   0824         JEQ     ??Carlson_StateMachine_10
     88                    Init_LEDs();
   \   000028   ........     CALLA   #Init_LEDs
     89                    lcd_BIG_mid();
   \   00002C   ........     CALLA   #lcd_BIG_mid
     90                    display_changed = 1;
   \   000030   D243....     MOV.B   #0x1, &display_changed
     91                    one_time = 0;
   \   000034   C243....     MOV.B   #0x0, &one_time
     92                  }
     93                  Time_Sequence = 0;             //
   \                     ??Carlson_StateMachine_10:
   \   000038   8243....     MOV.W   #0x0, &Time_Sequence
     94                  break;
   \   00003C   1001         RETA
     95                case 200:                        //
     96                  if(one_time){
   \                     ??Carlson_StateMachine_9:
   \   00003E   C293....     CMP.B   #0x0, &one_time
   \   000042   2824         JEQ     ??Carlson_StateMachine_5
     97                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   000044   F2D040004302 BIS.B   #0x40, &0x243
     98                    one_time = 0;
   \   00004A   C243....     MOV.B   #0x0, &one_time
     99                  }
    100                  break;
   \   00004E   1001         RETA
    101                case 150:                         //
    102                  if(one_time){
   \                     ??Carlson_StateMachine_8:
   \   000050   C293....     CMP.B   #0x0, &one_time
   \   000054   1F24         JEQ     ??Carlson_StateMachine_5
    103                    P1OUT |= RED_LED;            // Change State of LED 4
   \   000056   D2D30202     BIS.B   #0x1, &0x202
    104                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   00005A   F2C040004302 BIC.B   #0x40, &0x243
    105                    one_time = 0;
   \   000060   C243....     MOV.B   #0x0, &one_time
    106                  }
    107                  break;
   \   000064   1001         RETA
    108                case 100:                         //
    109                  if(one_time){
   \                     ??Carlson_StateMachine_7:
   \   000066   C293....     CMP.B   #0x0, &one_time
   \   00006A   1424         JEQ     ??Carlson_StateMachine_5
    110          //          lcd_4line();
    111                    lcd_BIG_bot();
   \   00006C   ........     CALLA   #lcd_BIG_bot
    112                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   000070   F2D040004302 BIS.B   #0x40, &0x243
    113                    display_changed = 1;
   \   000076   D243....     MOV.B   #0x1, &display_changed
    114                    one_time = 0;
   \   00007A   C243....     MOV.B   #0x0, &one_time
    115                  }
    116                  break;
   \   00007E   1001         RETA
    117                case  50:                        //
    118                  if(one_time){
   \                     ??Carlson_StateMachine_6:
   \   000080   C293....     CMP.B   #0x0, &one_time
   \   000084   0724         JEQ     ??Carlson_StateMachine_5
    119                    P1OUT &= ~RED_LED;           // Change State of LED 4
   \   000086   D2C30202     BIC.B   #0x1, &0x202
    120                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   00008A   F2C040004302 BIC.B   #0x40, &0x243
    121                    one_time = 0;
   \   000090   C243....     MOV.B   #0x0, &one_time
    122                  }
    123                  break;                         //
    124                default: break;
    125              }
    126          }
   \                     ??Carlson_StateMachine_5:
   \   000094   1001         RETA
   \   000096                REQUIRE _A_PCOUT_L
   \   000096                REQUIRE _A_PAOUT_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WOLFPACK ">`:
   \   000000   20574F4C4650 DC8 " WOLFPACK "
   \            41434B2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ECE306  ">`:
   \   000000   202045434533 DC8 "  ECE306  "
   \            3036202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  GP I/O  ">`:
   \   000000   202047502049 DC8 "  GP I/O  "
   \            2F4F202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Carlson_StateMachine
        4   -> Init_LEDs
        4   -> lcd_BIG_bot
        4   -> lcd_BIG_mid
      4   Display_Process
        4   -> Display_Update
      4   main
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> start_clock
        4   -> strcpy
      4   start_clock
        4   -> Display_Process
        4   -> project_04


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "   NCSU   ">
      11  ?<Constant "  ECE306  ">
      11  ?<Constant "  GP I/O  ">
      11  ?<Constant " WOLFPACK ">
     150  Carlson_StateMachine
      34  Display_Process
       2  _A_PAOUT_L
       2  _A_PBOUT_L
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       1  display_mode
      82  main
       2  mytime
       2  old_Time_Sequence
       1  slow_input_down
      34  start_clock
       2  test_value

 
 300 bytes in segment CODE
   8 bytes in segment DATA16_AN
  44 bytes in segment DATA16_C
  10 bytes in segment DATA16_Z
 
 300 bytes of CODE  memory
  44 bytes of CONST memory
  10 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
