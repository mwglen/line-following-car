###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          16/Feb/2022  20:09:05
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\main.c
#    Command line  =  
#        -f C:\Users\mwg22\AppData\Local\Temp\EW730F.tmp
#        (C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\main.c -lC
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List -o
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List\main.lst
#    Object file   =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj\main.r43
#
###############################################################################

C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          
     16          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          char change;
   \                     change:
   \   000000                DS8 1
     22          
     23          //------------------------------------------------------------------------------
     24          // Main Program
     25          // This is the main routine for the program. Execution of code starts here.
     26          // The operating system is Back Ground Fore Ground.
     27          //
     28          //------------------------------------------------------------------------------
     29          
     30          void start_clock();
     31          

   \                                 In  segment CODE, align 2
     32          void main(void){
   \                     main:
     33          
     34            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     35          
     36            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     37            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     38            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     39            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     40            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     41          
     42            // Place the contents of what you want on the display, in between the quotes
     43            // Limited to 10 characters per line
     44            strcpy(display_line[0], "          ");
   \   000018   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     45            strcpy(display_line[1], "  SYSTEM  ");
   \   000024   3D40....     MOV.W   #`?<Constant "  SYSTEM  ">`, R13
   \   000028   3C40....     MOV.W   #display_line + 11, R12
   \   00002C   ........     CALLA   #strcpy
     46            strcpy(display_line[2], " STARTED! ");
   \   000030   3D40....     MOV.W   #`?<Constant " STARTED! ">`, R13
   \   000034   3C40....     MOV.W   #display_line + 22, R12
   \   000038   ........     CALLA   #strcpy
     47            strcpy(display_line[3], "          ");
   \   00003C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000040   3C40....     MOV.W   #display_line + 33, R12
   \   000044   ........     CALLA   #strcpy
     48            display_changed = TRUE;
   \   000048   D243....     MOV.B   #0x1, &display_changed
     49          
     50            set_wheels_dir(0, 0);
   \   00004C   0D43         MOV.W   #0x0, R13
   \   00004E   0C43         MOV.W   #0x0, R12
   \   000050   ........     CALLA   #set_wheels_dir
     51            // This function never returns
     52            start_clock();
   \   000054   ........     CALLA   #start_clock
     53          }
   \   000058   1001         RETA
   \   00005A                REQUIRE _A_PM5CTL0_L
     54          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     55          unsigned int old_Time_Sequence;
   \                     old_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
     56          void start_clock() {
   \                     start_clock:
   \                     ??start_clock_0:
     57            while(ALWAYS) {
     58              // Update Clock
     59              if (Time_Sequence != old_Time_Sequence) {
   \   000000   9292........ CMP.W   &old_Time_Sequence, &Time_Sequence
   \   000006   0524         JEQ     ??start_clock_1
     60                old_Time_Sequence = Time_Sequence;
   \   000008   9242........ MOV.W   &Time_Sequence, &old_Time_Sequence
     61                run();
   \   00000E   ........     CALLA   #run
     62              }
     63              drive_car();
   \                     ??start_clock_1:
   \   000012   ........     CALLA   #drive_car
     64              
     65              Switches_Process();                // Check for switch state change
   \   000016   ........     CALLA   #Switches_Process
     66              Display_Process();                 // Update Display
   \   00001A   ........     CALLA   #Display_Process
     67              P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   00001E   D2E32202     XOR.B   #0x1, &0x222
   \   000022   EE3F         JMP     ??start_clock_0
   \   000024   0343         NOP
   \   000026                REQUIRE _A_PBOUT_L
     68            }
     69          }
     70          

   \                                 In  segment CODE, align 2
     71          void Display_Process(void){
   \                     Display_Process:
     72            if(update_display){
   \   000000   C293....     CMP.B   #0x0, &update_display
   \   000004   0D24         JEQ     ??Display_Process_0
     73              update_display = 0;
   \   000006   C243....     MOV.B   #0x0, &update_display
     74              if(display_changed){
   \   00000A   C293....     CMP.B   #0x0, &display_changed
   \   00000E   0824         JEQ     ??Display_Process_0
     75                display_changed = 0;
   \   000010   C243....     MOV.B   #0x0, &display_changed
     76                Display_Update(0,0,0,0);
   \   000014   4F43         MOV.B   #0x0, R15
   \   000016   4E43         MOV.B   #0x0, R14
   \   000018   4D43         MOV.B   #0x0, R13
   \   00001A   4C43         MOV.B   #0x0, R12
   \   00001C   ........     CALLA   #Display_Update
     77              }
     78            }
     79          }
   \                     ??Display_Process_0:
   \   000020   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  SYSTEM  ">`:
   \   000000   202053595354 DC8 "  SYSTEM  "
   \            454D202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " STARTED! ">`:
   \   000000   205354415254 DC8 " STARTED! "
   \            4544212000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Display_Process
        4   -> Display_Update
      4   main
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> set_wheels_dir
        4   -> start_clock
        4   -> strcpy
      4   start_clock
        4   -> Display_Process
        4   -> Switches_Process
        4   -> drive_car
        4   -> run


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  SYSTEM  ">
      11  ?<Constant " STARTED! ">
      34  Display_Process
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       1  display_mode
      90  main
       2  old_Time_Sequence
       1  slow_input_down
      38  start_clock
       2  test_value

 
 162 bytes in segment CODE
   4 bytes in segment DATA16_AN
  33 bytes in segment DATA16_C
   8 bytes in segment DATA16_Z
 
 162 bytes of CODE  memory
  33 bytes of CONST memory
   8 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
