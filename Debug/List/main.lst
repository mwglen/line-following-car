###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          21/Feb/2022  13:14:08
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\main.c
#    Command line  =  
#        -f C:\Users\mwg22\AppData\Local\Temp\EW4976.tmp
#        (C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\main.c -lC
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List -o
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List\main.lst
#    Object file   =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj\main.r43
#
###############################################################################

C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\main.c
      1          /// Includes
      2          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
      3          #include "ports.h"
      4          #include "clocks.h"
      5          #include "display.h"
      6          #include "program.h"
      7          #include "switches.h"
      8          #include "wheels.h"
      9          #include "init.h"
     10          
     11          /// Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int OLD_TIME_SEQUENCE = 0;
   \                     OLD_TIME_SEQUENCE:
   \   000000                DS8 2
     17          extern volatile unsigned int Time_Sequence;
     18          
     19          /// External Functions
     20          void Init_Timers(void);
     21          void Init_LCD(void);
     22          
     23          /// Functions
     24          // main function

   \                                 In  segment CODE, align 2
     25          void main(void){
   \                     main:
     26            
     27            // set PM5CTL0
     28            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     29          
     30            // Initialize system
     31            init_ports();                        // Initialize Ports
   \   000004   ........     CALLA   #init_ports
     32            init_clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #init_clocks
     33            init_conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #init_conditions
     34            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     35            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     36            init_display();
   \   000018   ........     CALLA   #init_display
     37          
     38            while(ALWAYS) {
     39              // Update Clock
     40              if (Time_Sequence != OLD_TIME_SEQUENCE) {
   \                     ??main_0:
   \   00001C   9292........ CMP.W   &OLD_TIME_SEQUENCE, &Time_Sequence
   \   000022   0524         JEQ     ??main_1
     41                OLD_TIME_SEQUENCE = Time_Sequence;
   \   000024   9242........ MOV.W   &Time_Sequence, &OLD_TIME_SEQUENCE
     42                program_start();
   \   00002A   ........     CALLA   #program_start
     43              }
     44              drive_car();
   \                     ??main_1:
   \   00002E   ........     CALLA   #drive_car
     45              
     46              switches_process();                // Check for switch state change
   \   000032   ........     CALLA   #switches_process
     47              display_process();                 // Update Display
   \   000036   ........     CALLA   #display_process
     48              P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   00003A   D2E32202     XOR.B   #0x1, &0x222
   \   00003E   EE3F         JMP     ??main_0
   \   000040   0343         NOP
   \   000042                REQUIRE _A_PM5CTL0_L
   \   000042                REQUIRE _A_PBOUT_L
     49            }
     50          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Init_LCD
        4   -> Init_Timers
        4   -> display_process
        4   -> drive_car
        4   -> init_clocks
        4   -> init_conditions
        4   -> init_display
        4   -> init_ports
        4   -> program_start
        4   -> switches_process


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  OLD_TIME_SEQUENCE
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
      66  main
       1  slow_input_down
       2  test_value

 
 66 bytes in segment CODE
  4 bytes in segment DATA16_AN
  7 bytes in segment DATA16_Z
 
 66 bytes of CODE memory
  7 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
