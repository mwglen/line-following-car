###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          17/Feb/2022  19:20:03
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\system.c
#    Command line  =  
#        -f C:\Users\mwg22\AppData\Local\Temp\EWA506.tmp
#        (C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\system.c -lC
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List -o
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List\system.lst
#    Object file   =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj\system.r43
#
###############################################################################

C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\system.c
      1          /// Includes
      2          #include "msp430.h"
      3          #include "system.h"
      4          
      5          /// Functions
      6          //inline void READ_AND_DISCARD(unsigned int reg) __attribute__((always_inline));
      7          //void READ_AND_DISCARD(unsigned int reg){
      8          //  asm volatile ("" : "=m" (reg) : "r" (reg));
      9          //}
     10          
     11          //inline void enable_interrupts(void) __attribute__((always_inline));

   \                                 In  segment CODE, align 2
     12          void enable_interrupts(void){
   \                     enable_interrupts:
     13            __bis_SR_register(GIE);     // enable interrupts
   \   000000   0343         NOP
   \   000002   32D2         BIS.W   #0x8, SR
     14          //  asm volatile ("eint \n");
     15          }
   \   000004   1001         RETA
     16          
     17          //inline void disable_interrupts(void) __attribute__((always_inline));
     18          //void disable_interrupts(void){
     19          //  asm volatile ("dint \n");
     20          //}
     21          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  enable_interrupts

 
 6 bytes in segment CODE
 
 6 bytes of CODE memory

Errors: none
Warnings: none
