###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          18/Feb/2022  17:29:37
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\init.c
#    Command line  =  
#        -f C:\Users\mwg22\AppData\Local\Temp\EW5371.tmp
#        (C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\init.c -lC
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List -o
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\List\init.lst
#    Object file   =  
#        C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\Debug\Obj\init.r43
#
###############################################################################

C:\Users\mwg22\OneDrive\Desktop\ECE306-Project\init.c
      1          /// Includes
      2          #include "primitives.h"
      3          #include "msp430.h"
      4          #include "init.h"
      5          #include "system.h"
      6          #include "display.h"
      7          
      8          /// Functions

   \                                 In  segment CODE, align 2
      9          void init_conditions(void){
   \                     init_conditions:
   \   000000   0A12         PUSH.W  R10
     10          
     11            int i;
     12            for(i=0;i<11;i++){
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??init_conditions_0:
   \   000004   3A900B00     CMP.W   #0xb, R10
   \   000008   0A34         JGE     ??init_conditions_1
     13              display_line[0][i] = RESET_STATE;
   \   00000A   CA43....     MOV.B   #0x0, display_line(R10)
     14              display_line[1][i] = RESET_STATE;
   \   00000E   CA43....     MOV.B   #0x0, display_line + 11(R10)
     15              display_line[2][i] = RESET_STATE;
   \   000012   CA43....     MOV.B   #0x0, display_line + 22(R10)
     16              display_line[3][i] = RESET_STATE;
   \   000016   CA43....     MOV.B   #0x0, display_line + 33(R10)
     17            }
   \   00001A   1A53         ADD.W   #0x1, R10
   \   00001C   F33F         JMP     ??init_conditions_0
     18            display_line[0][10] = 0;
   \                     ??init_conditions_1:
   \   00001E   C243....     MOV.B   #0x0, &display_line + 10
     19            display_line[1][10] = 0;
   \   000022   C243....     MOV.B   #0x0, &display_line + 21
     20            display_line[2][10] = 0;
   \   000026   C243....     MOV.B   #0x0, &display_line + 32
     21            display_line[3][10] = 0;
   \   00002A   C243....     MOV.B   #0x0, &display_line + 43
     22          
     23            display[0] = &display_line[0][0];
   \   00002E   B240........ MOV.W   #display_line, &display
     24            display[1] = &display_line[1][0];
   \   000034   B240........ MOV.W   #display_line + 11, &display + 2
     25            display[2] = &display_line[2][0];
   \   00003A   B240........ MOV.W   #display_line + 22, &display + 4
     26            display[3] = &display_line[3][0];
   \   000040   B240........ MOV.W   #display_line + 33, &display + 6
     27            display_changed = 1; 
   \   000046   D243....     MOV.B   #0x1, &display_changed
     28          
     29            // Interrupts are disabled by default, enable them.
     30            enable_interrupts();
   \   00004A   ........     CALLA   #enable_interrupts
     31          }
   \   00004E   3A41         POP.W   R10
   \   000050   1001         RETA
     32          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   init_conditions
        6   -> enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      82  init_conditions

 
 82 bytes in segment CODE
 
 82 bytes of CODE memory

Errors: none
Warnings: none
